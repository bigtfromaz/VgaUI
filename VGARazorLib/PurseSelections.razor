@using VgaUI.Shared;

<div class="vga-background container-fluid no-border" style="background-color: #e2d071;">
    @{
        totalFees = 0;
    }
    @if (roundResults != null && roundResults.Players.Any())
    {
        purseSettings = roundResults.CurrentPurseSettings;
        <table class="table table-striped">
            <thead class="thead-light sticky-top text-white">
                <tr>
                    <th scope="col" class="col-sm-10" colspan="8"><h4>Purse Selections</h4></th>
                </tr>
                <tr>
                    <th scope="col" class="col-sm-2 text-left">Player</th>
                    <th scope="col" class="col-sm-1 text-center">CTP Holes</th>
                    <th scope="col" class="col-sm-1 text-center">In LowNet</th>
                    <th scope="col" class="col-sm-1 text-center">In Skins</th>
                    <th scope="col" class="col-sm-1 text-center">DNF</th>
                    <th scope="col" class="col-sm-1 text-center">Is Guest</th>
                    <th scope="col" class="col-sm-1 text-center">No Show</th>
                    <th scope="col" class="col-sm-1 text-center">Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var playerResult in roundResults.PlayersByName)
                {

                    //if (purseSettings is null) purseSettings = new PurseSettings();
                    currentFee = playerResult.PlayerEntryFee(purseSettings);
                    totalFees += currentFee;

                    bool bDisallowSkinChanges = false;
                    if (playerResult.NumSkins > 0)
                    {
                        bDisallowSkinChanges = true;
                    }
                    else
                    {
                        bDisallowSkinChanges = false;
                    }

                    bool bDisallowGuestChanges = false;
                    if (playerResult.LowNetPurse > 0)
                    {
                        bDisallowGuestChanges = true;
                    }
                    else
                    {
                        bDisallowGuestChanges = false;
                    }

                    <tr>
                        <td class="text-left">@playerResult.Player</td>
                        <td class="text-center">
                            @if (roundResults.IsOfficial)
                            {
                                <span><strong>@(playerResult.CtpEntryString)</strong></span>
                            }
                            else
                            {
                                <input class="border" type="text" size="4" @bind="@playerResult.CtpEntryString" @onblur="CBChanged" disabled="@roundResults.IsOfficial" placeholder="e.g. 4,8" />
                            }
                            
                        </td>
                        <td class="text-center">
                            <input class="border" type="checkbox" @bind="@playerResult.IsInLowNet" @bind:event="oninput" @onchange="CBChanged" disabled="@roundResults.IsOfficial" />
                        </td>
                        <td class="text-center">
                            <input class="border" type="checkbox" @bind="@playerResult.IsInSkins" @bind:event="oninput" @onchange="CBChanged" disabled="@(bDisallowSkinChanges || roundResults.IsOfficial)" />
                        </td>
                        <td class="text-center">
                            <input class="border" type="checkbox" @bind="@playerResult.IsDNF" @bind:event="oninput" @onchange="CBChanged" disabled="@roundResults.IsOfficial" />
                        </td>
                        <td class="text-center">
                            <input class="border" type="checkbox" @bind="@playerResult.IsGuest" @bind:event="oninput" @onchange="CBChanged" disabled="@(bDisallowGuestChanges || roundResults.IsOfficial)" />
                        </td>
                        <td class="text-center">
                            <input class="border" type="checkbox" @bind="@playerResult.IsNoShow" @bind:event="oninput" @onchange="CBChanged" disabled="@roundResults.IsOfficial" />
                        </td>
                        <td class="text-center"><strong>@currentFee.ToString("C")</strong></td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="vga-background no-border">
            <p><strong>Total Fees: @totalFees.ToString("C")</strong></p>
        </div>
    }
    else
    {
        <p>No disbursements to display.</p>
    }
</div>

@code {
    [Parameter]
    public RoundResults roundResults { get; set; } = new();
    [Parameter]
    public bool UnLocked { get; set; } = false;
    [Parameter]
    public EventCallback OnChildChanged { get; set; }

    private PurseSettings? purseSettings = null;
    decimal currentFee = 0;
    decimal totalFees = 0;

    protected override void OnInitialized()
    {
        purseSettings = roundResults.CurrentPurseSettings;
        currentFee = 0;
        totalFees = 0;
    }
    private void CBChanged()
    {
        // Some code that changes the state of the child component...

        // Notify the parent component that the child's state has changed.
        OnChildChanged.InvokeAsync(null);
    }
}
